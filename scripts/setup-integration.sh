#!/bin/bash
# Integration setup script for Spec-Kit enhanced features
# Sets up all 4 layers of the Spec-Kit integration

set -e

REPO_ROOT=$(git rev-parse --show-toplevel 2>/dev/null || pwd)
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Source common utilities
source "$SCRIPT_DIR/common.sh"

print_header() {
    echo "ðŸŒ± Setting up Spec-Kit Integration"
    echo "================================="
}

create_integration_directories() {
    log "Creating integration directories..."
    
    # Create expert systems directory
    mkdir -p "$REPO_ROOT/experts"
    
    # Create memory system if it doesn't exist
    if [ ! -d "$REPO_ROOT/memory" ]; then
        mkdir -p "$REPO_ROOT/memory"
    fi
    
    # Create docs directory for Step 1 documents
    mkdir -p "$REPO_ROOT/docs"
    
    # Create PACT coordination directory
    mkdir -p "$REPO_ROOT/coordination"
}

setup_foundation_documents() {
    log "Setting up foundation document templates..."
    
    # Create placeholder files if they don't exist
    if [ ! -f "$REPO_ROOT/BACKLOG.md" ]; then
        cat > "$REPO_ROOT/BACKLOG.md" << 'EOF'
# Project Backlog

*Generated by `/discover` command. This file contains prioritized features and requirements.*

## High Priority Features

- [Feature] - Brief description
  - **Effort**: [Small/Medium/Large]
  - **Dependencies**: None
  - **Acceptance Criteria**: 
    - [ ] Criterion 1
    - [ ] Criterion 2

## Medium Priority Features

## Low Priority Features

## Future Considerations

---
*Last updated: [Date]*
EOF
    fi
    
    if [ ! -f "$REPO_ROOT/IMPLEMENTATION_GUIDE.md" ]; then
        cat > "$REPO_ROOT/IMPLEMENTATION_GUIDE.md" << 'EOF'
# Implementation Guide

*Generated by `/discover` command. This file contains high-level implementation strategy.*

## Technology Stack

- **Frontend**: [To be determined]
- **Backend**: [To be determined]
- **Database**: [To be determined]
- **Deployment**: [To be determined]

## Architecture Overview

[Architecture description]

## Development Phases

### Phase 1: Foundation
- [ ] Project setup
- [ ] Core infrastructure

### Phase 2: Core Features
- [ ] Feature implementation
- [ ] Testing

### Phase 3: Integration & Polish
- [ ] Integration testing
- [ ] Documentation
- [ ] Deployment

---
*Last updated: [Date]*
EOF
    fi
}

setup_expert_templates() {
    log "Setting up expert system templates..."
    
    # Create expert template directory
    mkdir -p "$REPO_ROOT/experts/templates"
    
    cat > "$REPO_ROOT/experts/README.md" << 'EOF'
# Expert Systems

This directory contains specialized expert context files that provide domain-specific guidance for the project.

## Available Experts

Expert files are generated using the `/expert` command and provide specialized knowledge for different aspects of development.

## Usage

Expert systems are automatically consulted by enhanced SDD commands (`/specify`, `/plan`, `/tasks`) when relevant to the current development context.

Use `/sync` to keep expert knowledge current with project evolution.
EOF
}

setup_coordination_framework() {
    log "Setting up PACT coordination framework..."
    
    cat > "$REPO_ROOT/coordination/README.md" << 'EOF'
# PACT Coordination Framework

This directory contains coordination patterns and agent configuration for multi-agent development.

## Framework Components

- **Planning**: Collaborative planning templates and coordination patterns
- **Action**: Task execution and responsibility assignment  
- **Coordination**: Agent synchronization and communication protocols
- **Testing**: Collaborative quality assurance and validation

## Usage

The PACT framework is initialized using the `/pact` command and provides enhanced coordination for team and multi-agent development scenarios.
EOF
}

update_gitignore() {
    log "Updating .gitignore for integration..."
    
    if [ ! -f "$REPO_ROOT/.gitignore" ]; then
        touch "$REPO_ROOT/.gitignore"
    fi
    
    # Add integration-specific ignores if not already present
    if ! grep -q "# Spec-Kit Integration" "$REPO_ROOT/.gitignore"; then
        cat >> "$REPO_ROOT/.gitignore" << 'EOF'

# Spec-Kit Integration
*.tmp
.spec-kit/
experts/cache/
coordination/logs/
EOF
    fi
}

setup_agent_instructions() {
    log "Setting up agent instruction files..."
    
    # This will be called by the CLI to set up agent-specific files
    # The actual content depends on which agent is being used
    local agent_type="${1:-claude}"
    
    case "$agent_type" in
        "claude")
            setup_claude_instructions
            ;;
        "copilot")
            setup_copilot_instructions
            ;;
        "gemini")
            setup_gemini_instructions
            ;;
        *)
            log "Unknown agent type: $agent_type, skipping agent setup"
            ;;
    esac
}

setup_claude_instructions() {
    if [ ! -f "$REPO_ROOT/CLAUDE.md" ]; then
        log "Creating CLAUDE.md with Spec-Kit integration..."
        
        # Copy template and customize
        cp "$REPO_ROOT/templates/agent-instructions-template.md" "$REPO_ROOT/CLAUDE.md"
        
        # Replace placeholders
        sed -i.bak 's/{PROJECT_NAME}/'"$(basename "$REPO_ROOT")"'/g' "$REPO_ROOT/CLAUDE.md"
        sed -i.bak 's/{PROJECT_STRUCTURE}/```\n.\n```/g' "$REPO_ROOT/CLAUDE.md"
        sed -i.bak 's/{TECH_STACK}/To be determined via \/discover and \/plan commands/g' "$REPO_ROOT/CLAUDE.md"
        sed -i.bak 's/{DEVELOPMENT_GUIDELINES}/Follow Spec-Kit methodology and constitutional principles/g' "$REPO_ROOT/CLAUDE.md"
        
        # Clean up backup file
        rm -f "$REPO_ROOT/CLAUDE.md.bak"
    fi
}

setup_copilot_instructions() {
    if [ ! -f "$REPO_ROOT/.github/copilot-instructions.md" ]; then
        log "Creating GitHub Copilot instructions with Spec-Kit integration..."
        
        mkdir -p "$REPO_ROOT/.github"
        cp "$REPO_ROOT/templates/agent-instructions-template.md" "$REPO_ROOT/.github/copilot-instructions.md"
        
        # Customize for Copilot
        sed -i.bak 's/{PROJECT_NAME}/'"$(basename "$REPO_ROOT")"'/g' "$REPO_ROOT/.github/copilot-instructions.md"
        sed -i.bak 's/{PROJECT_STRUCTURE}/```\n.\n```/g' "$REPO_ROOT/.github/copilot-instructions.md"
        sed -i.bak 's/{TECH_STACK}/To be determined via \/discover and \/plan commands/g' "$REPO_ROOT/.github/copilot-instructions.md"
        sed -i.bak 's/{DEVELOPMENT_GUIDELINES}/Follow Spec-Kit methodology and constitutional principles/g' "$REPO_ROOT/.github/copilot-instructions.md"
        
        rm -f "$REPO_ROOT/.github/copilot-instructions.md.bak"
    fi
}

setup_gemini_instructions() {
    if [ ! -f "$REPO_ROOT/GEMINI.md" ]; then
        log "Creating GEMINI.md with Spec-Kit integration..."
        
        cp "$REPO_ROOT/templates/agent-instructions-template.md" "$REPO_ROOT/GEMINI.md"
        
        # Customize for Gemini
        sed -i.bak 's/{PROJECT_NAME}/'"$(basename "$REPO_ROOT")"'/g' "$REPO_ROOT/GEMINI.md"
        sed -i.bak 's/{PROJECT_STRUCTURE}/```\n.\n```/g' "$REPO_ROOT/GEMINI.md"
        sed -i.bak 's/{TECH_STACK}/To be determined via \/discover and \/plan commands/g' "$REPO_ROOT/GEMINI.md"
        sed -i.bak 's/{DEVELOPMENT_GUIDELINES}/Follow Spec-Kit methodology and constitutional principles/g' "$REPO_ROOT/GEMINI.md"
        
        rm -f "$REPO_ROOT/GEMINI.md.bak"
    fi
}

verify_integration() {
    log "Verifying integration setup..."
    
    local errors=0
    
    # Check required directories
    if [ ! -d "$REPO_ROOT/experts" ]; then
        error "Missing experts directory"
        ((errors++))
    fi
    
    if [ ! -d "$REPO_ROOT/coordination" ]; then
        error "Missing coordination directory"
        ((errors++))
    fi
    
    # Check foundation documents
    if [ ! -f "$REPO_ROOT/BACKLOG.md" ]; then
        error "Missing BACKLOG.md"
        ((errors++))
    fi
    
    if [ ! -f "$REPO_ROOT/IMPLEMENTATION_GUIDE.md" ]; then
        error "Missing IMPLEMENTATION_GUIDE.md"
        ((errors++))
    fi
    
    if [ $errors -eq 0 ]; then
        success "Integration setup verified successfully!"
        return 0
    else
        error "Integration setup has $errors errors"
        return 1
    fi
}

main() {
    print_header
    
    local agent_type="${1:-claude}"
    
    create_integration_directories
    setup_foundation_documents
    setup_expert_templates
    setup_coordination_framework
    update_gitignore
    setup_agent_instructions "$agent_type"
    
    if verify_integration; then
        echo ""
        echo "âœ… Spec-Kit integration setup complete!"
        echo ""
        echo "Next steps:"
        echo "1. Use '/discover' to create comprehensive project documentation"
        echo "2. Use '/sparc' to apply structured methodology" 
        echo "3. Use '/expert' to create domain-specific guidance"
        echo "4. Use '/pact' to setup collaborative coordination"
        echo "5. Use enhanced '/specify', '/plan', '/tasks' with full context"
        echo ""
        echo "Use '/workflow' to orchestrate complete integrated development workflows."
    else
        error "Integration setup failed. Please check the errors above."
        exit 1
    fi
}

# Allow script to be sourced or executed
if [ "${BASH_SOURCE[0]}" = "${0}" ]; then
    main "$@"
fi
